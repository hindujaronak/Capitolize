# Defaults for UserDB

# Set debug to true to get more debug info
debug: true

# Set debugEndpoints=true to see incoming GET/POST request information
debugEndpoints: false

# Set this to a logger that can .info(), .debug(), .error()
#
logger: null

# The name of the group used to represebt super-admins
super-admin: super-admin

# These are the main endpoints a client would call, or would be
# accessible by clikcing on a link in a workflow email.
#
endpoints:
  login:
    enabled: true
    uri: /login
  logout:
    enabled: true
    uri: /logout
  me:
    enabled: true
    uri: /me
  verify:
    enabled: false
    uri: /verify
  forgot:
    enabled: true
    uri: /forgot
  change:
    enabled: true
    uri: /change
  expired:
    enabled: false
    uri: /expired

# If endpoints.expired.enabled == true, then use the
# following variable to indicate how many seconds a password
# should be valid for before it expires.  The default value is
# three months.
passwordsExpireInSeconds: 2592000

# Set sessionsExpireInSeconds to a non zero value (in seconds) to enforce
# expiring sessions.  If set to zero, then sessions to not expire.
sessionsExpireInSeconds: 0

# The following dictates password strength parameters, if you
# endable it
passwordPolicy:
  enabled: false
  length: 5
  uppers: 0
  lowers: 1
  numbers: 1
  specials: 0

# Number of unsuccessful login attempts allowed before an
# accout is locked out.  If set to zero, then this feature is
# not enabled (an account will never be locked due to failed login
# attempts).
disableAccountAfterFailedLoginAttempts: 0

# Once an account has been locked, the number of seconds to wait until the
# account qualifies for an automatic unlock.  The default here is 15 minutes.
reenableLockedAccountsAfterSeconds: 900

# Set this next option to the number of past passwords that should be
# unqiue.  When a user picks a new password due to their current password
# expiring, the new password must not be equal to the N most recent passwords
# used by this user.  If this option is set to zero, then this check is
# displabled.
passwordsCantMatch: 0
    
# These "hrefs" are attached to users and roles to make them
# look like they should if they came from Stormpath.  The
# values do not matter but they should be valid hrefs.
#
accounts_href: http://localhost/accounts
groups_href: http://localhost/groups

# This is the default session used for passport.
# You will need to supply a "store" in a production
# environment.  See "express-session" for details
#
session:
  key: userdb
  secret: jsjjhdhgdghd
  resave: false
  rolling: true
  saveUninitialized: true

# The backing store.  Set the driver to a known type.
# Pass in the connection options via options.
database:
  driver: knex
  options: null

# You can supply a function here to add more of your own
# passport authentication methods.  See the documentation,
# but basically, if "realm" is present in the request headers,
# its value is passed into passport.authenticate() and you better
# have an authentication strategey installed for that method.
# "local" is already installed by default.
#
strategies: null

# For the workflow email system, the options for using an
# SMTP server to send emails.
smtp:
  from: FROM_EMAIL_ADDRESS
  options:
    auth:
      user: SMTP_USER
      pass: SMTP_PASS
    port: SMTP_PORT
    host: SMTP_HOST
    secure: true
    ignoreTLS: false
    requireTLS: true
    name: SMTP_SERVER_NAME
    localAddress: 0.0.0.0
    connectionTimeout: 3000
    greetingTimeout: 3000
    socketTimeout: 5000
    debug: false
    lmtp: false
    authMethod: PLAIN
    tls: {}

# For the workflow email system
email:
  accountVerification:
    enabled: false
    subject: Please verify your account
    template: account-verification.html
    format: text
    endpoint: http://localhost:3000/verify
  accountVerificationSuccessful:
    enabled: false
    subject: Your account has been confirmed
    template: account-verification-successful.html
    format: text
  accountWelcome:
    enabled: false
    subject: Your registration was successful
    template: account-welcome.html
    format: text
  forgotPassword:
    enabled: false
    subject: Reset your password
    template: forgot-password.html
    format: text
    endpoint: http://localhost:3000/change
  passwordResetSuccessful:
    enabled: false
    subject: Your password has been changed
    template: password-reset-successful.html
    format: text

# You can supply a function to transform the user as it comes out
# of the persistent store into something different before it is
# sent to the client.  This can be useful to transform the user into
# something that looks like it came from Stormpath for example.
#
# If set to a function, the function is called with user and expects
# a user in return.  If set to a string, will attempt to use a transformer
# that comes with this library.  This library ships with "stormpath".
#
# If set to null, then no transformation is performed.
#
transformer: stormpath

# For account verification and password reset tokens
#
# YOU NEED TO SUPPLY YOUR OWN SIGNING KEY !!!  Needs to be
# as random as possible.  Consider require( 'node-uuid' ).v4().
tokenSigningKey: 674a3323-9a91-4bc4-b8a5-0c13d6a08a00

# Duration (in seconds) that the tokens should be valid for.
accountVerificationTokenExpire: 86400
passwordResetTokenExpire: 3600
